[{"path":"https://mghoff.github.io/billmillr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 billmillr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mghoff.github.io/billmillr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Hoff. Author, maintainer.","code":""},{"path":"https://mghoff.github.io/billmillr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hoff M (2023). billmillr: Rethinking Bill Miller Problem. https://github.com/mghoff/billmillr, https://mghoff.github.io/billmillr/.","code":"@Manual{,   title = {billmillr: Rethinking the Bill Miller Problem},   author = {Matthew Hoff},   year = {2023},   note = {https://github.com/mghoff/billmillr, https://mghoff.github.io/billmillr/}, }"},{"path":"https://mghoff.github.io/billmillr/index.html","id":"billmillr","dir":"","previous_headings":"","what":"Rethinking the Bill Miller Problem","title":"Rethinking the Bill Miller Problem","text":"Author: Matthew Hoff License: MIT","code":""},{"path":"https://mghoff.github.io/billmillr/index.html","id":"why-you-should-care-about-this-package","dir":"","previous_headings":"","what":"Why you should care about this package","title":"Rethinking the Bill Miller Problem","text":"package provides functions & documentation solving “Bill Miller Problem” presented within theoretical physicist & mathematician Leonard Mlodinow’s book entitled Drunkard’s Walk: Randomness Rules Lives. generally, functions herein can used solve - either analytically simulation - likelihood obtaining winning streak given length within given number attempts, attempted specified number individuals.","code":""},{"path":"https://mghoff.github.io/billmillr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Rethinking the Bill Miller Problem","text":"package can installed directly GitHub via remotes package.","code":"remotes::install_github(\"mghoff/billmillr\")"},{"path":"https://mghoff.github.io/billmillr/index.html","id":"the-premise","dir":"","previous_headings":"","what":"The Premise","title":"Rethinking the Bill Miller Problem","text":"story goes Bill Miller (financier & hedge fund manager) perceived premier stock picker performed incredibly well 15 consecutive years (.e. beating S&P-500 stock index year). result, celebrated acclaimed likes Forbes others, estimated published statistics odds success. estimated likelihood performant random chance alone 1 32,768 ~0.0032%. estimate roughly true one considers one individual - Bill Miller, case - picking stocks. words, claimed 15-year winning streak likely driven random chance alone, instead knowledge intuition market - allowing skillfully pick winning stocks seemingly . However, Dr. Mlodinow understood illustrated book /many hedge fund managers picking stocks. Based fact, poses first two refinements estimation: “1000 stock pickers (coin tossers), odds least 1 beats market every year 15 consecutive years?” answer question roughly 3% - far greater original estimate 0.0032%. trivial verify. second final refinement Dr. Mlodinow poses considers scenario beating market 15 years consecutively longer within 40 year period; .e. 40 years 1000 traders, probability least 1 trader obtain winning streak least 15 years given odds winning (beating S&P-500) given year equal 0.5 (fair coin toss)? additional refinement, Dr. Mlodinow claims odds roughly 3 4, 75%; however, provides proof claim. Using functions within package, one can calculate - , analytically numerical simulation - odds within high degree accuracy. found odds estimate two refinements roughly ~33.7%… quite different still claimed 75%.","code":""},{"path":[]},{"path":"https://mghoff.github.io/billmillr/index.html","id":"part-1","dir":"","previous_headings":"The Premise > The Math","what":"Part 1:","title":"Rethinking the Bill Miller Problem","text":"One must compute odds getting run (.e. streak) least k heads N coin tosses p (q = 1-p) probability obtaining heads (tails) toss coin. Mathematically,    can broken recursively following sum terms:    sum terms provided odds_of_streak(). information, see Ask Mathematician post.","code":""},{"path":"https://mghoff.github.io/billmillr/index.html","id":"part-2","dir":"","previous_headings":"The Premise > The Math","what":"Part 2:","title":"Rethinking the Bill Miller Problem","text":"calculate likelihood least j M people obtain streak least k heads N coin tosses, one must perform following: Calculate PDF:    , provided odds_of_streak(). Next, calculate CDF:    lastly, calculate final result:    provided prob_of_at_least_k().","code":""},{"path":[]},{"path":"https://mghoff.github.io/billmillr/index.html","id":"example-1-mathematical-proof","dir":"","previous_headings":"The Premise > Examples","what":"Example 1: Mathematical Proof","title":"Rethinking the Bill Miller Problem","text":"Load Package… context Bill Miller problem, calculate probability obtaining winning streak least 15 heads 40 coin tosses, given probability p (q) heads (tails) fair, .e. p = q = 0.5. Using pS, can now calculate probability least 1 person 1000 people obtain winning streak.","code":"library(billmillr) tictoc::tic() pS <- odds_of_streak(num_coins = 40, min_heads = 15, prob_heads = 0.5) pS #> [1] 0.000411981018260121 tictoc::toc(func.toc = msg.toc) #> 16.474 hours elapsed  sessionInfo() #> R version 4.1.2 (2021-11-01) #> Platform: aarch64-apple-darwin20 (64-bit) #> Running under: macOS Monterey 12.3.1  #> Matrix products: default #> LAPACK: /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRlapack.dylib  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8  #> attached base packages: #> [1] stats graphics grDevices utils datasets methods base       #> other attached packages: #> [1] billmillr_0.2.5  #> loaded via a namespace (and not attached): #> [1] compiler_4.1.2 tictoc_1.0.1 tools_4.1.2 pK <- prob_of_at_least_k(N = 1000, K = 1, p = pS) pK #> [1] 0.3377194"},{"path":"https://mghoff.github.io/billmillr/index.html","id":"example-2-simulation","dir":"","previous_headings":"The Premise > Examples","what":"Example 2: Simulation","title":"Rethinking the Bill Miller Problem","text":"Simulate return resulting data  finally, run small bootstrap sampling simulation…","code":"set.seed(1203) tictoc::tic() sim_data <- run_simulation(   iters = 2000,   trials = 1000, # Number of traders   sample_space = c(\"H\", \"T\"),   sample_size = 40, # Number of years   run_value = \"H\",   run_length = 15 # Number of consecutive winning years ) tictoc::toc() #> 39.241 sec elapsed  sim_data[2000, 3:4] #>      prob_of_zero prob_of_ge_one #> 2000        0.666          0.334 # Number of times to run the simulation bsn <- 500 # Build an empty matrix of proper dimensions to capture results  bs_sim_mtx <- matrix(   data = 0, nrow = bsn, ncol = 2,   dimnames = list(c(), c(\"prob_of_zero\", \"prob_of_ge_one\")) )  # Run and time a bootstrap sampling estimate of the above simulation tictoc::tic() for (bsi in 1:bsn) {   dat <- run_simulation(     iters = 2000,     trials = 1000, # Number of traders     sample_space = c(\"H\", \"T\"),     sample_size = 40, # Number of years     run_value = \"H\",     run_length = 15 # Number of consecutive winning years   )   # Take the last row from simulation data above as i-th entry into matrix   bs_sim_mtx[bsi, ] <- as.matrix(dat[bsn, 3:4]) } tictoc::toc(func.toc = msg.toc) #> 5.148 hours elapsed  colMeans(bs_sim_mtx) #>   prob_of_zero prob_of_ge_one  #>        0.66252        0.33748"},{"path":"https://mghoff.github.io/billmillr/reference/billmillr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"billmillr: Rethinking the Bill Miller Problem — billmillr-package","title":"billmillr: Rethinking the Bill Miller Problem — billmillr-package","text":"package calculates likelihood one trader n traders beat market least k-years sequence t-years time period considering independent definite start stop periods k-years sequence given t-years time period nth trader.","code":""},{"path":[]},{"path":"https://mghoff.github.io/billmillr/reference/billmillr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"billmillr: Rethinking the Bill Miller Problem — billmillr-package","text":"Maintainer: Matthew Hoff matthew.g.hoff@gmail.com","code":""},{"path":"https://mghoff.github.io/billmillr/reference/count_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Runs — count_runs","title":"Count Runs — count_runs","text":"given number trials flipping fair coin (p = 0.5) n times, count number times run (streak) length k occurs","code":""},{"path":"https://mghoff.github.io/billmillr/reference/count_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Runs — count_runs","text":"","code":"count_runs(   trials,   sample_space,   sample_probs = NULL,   sample_size,   run_value,   run_length )"},{"path":"https://mghoff.github.io/billmillr/reference/count_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Runs — count_runs","text":"trials number, number times flipping coin n times. sample_space vector, vector unique values sample. sample_probs vector, vector probabilities equal length sample_space. sample_size number, size sample generate sample_space; e.g. n coin flips. run_value number character, value count sequential occurrences. run_length number, length streak interest value.","code":""},{"path":"https://mghoff.github.io/billmillr/reference/count_runs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Runs — count_runs","text":"number, total number applicable runs; .e. number runs length run greater equal specified run_length.","code":""},{"path":"https://mghoff.github.io/billmillr/reference/count_runs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Runs — count_runs","text":"","code":"count_runs(  trials = 8,  sample_space = c(0, 1),  sample_size = 5,  run_value = 1,  run_length = 3 ) #> [1] 3"},{"path":"https://mghoff.github.io/billmillr/reference/find_longest_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Longest Run — find_longest_run","title":"Calculate the Longest Run — find_longest_run","text":"Finds single longest run (streak) specified value contained within provided vector","code":""},{"path":"https://mghoff.github.io/billmillr/reference/find_longest_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Longest Run — find_longest_run","text":"","code":"find_longest_run(sample, run_value)"},{"path":"https://mghoff.github.io/billmillr/reference/find_longest_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Longest Run — find_longest_run","text":"sample numeric character vector. run_value number character, value count sequential occurrences.","code":""},{"path":"https://mghoff.github.io/billmillr/reference/find_longest_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Longest Run — find_longest_run","text":"number, longest run (streak) values","code":""},{"path":"https://mghoff.github.io/billmillr/reference/find_longest_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Longest Run — find_longest_run","text":"","code":"s <- sample(c(0, 1), size = 10, replace = TRUE) print(s) #>  [1] 0 1 0 1 0 1 0 1 1 0  find_longest_run(sample = s, run_value = 1) #> [1] 2"},{"path":"https://mghoff.github.io/billmillr/reference/odds_of_streak.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Odds of a Streak — odds_of_streak","title":"Calculate the Odds of a Streak — odds_of_streak","text":"Calculate odds single streak least k heads n coin tosses given probability heads (tails) p (q = 1-p).","code":""},{"path":"https://mghoff.github.io/billmillr/reference/odds_of_streak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Odds of a Streak — odds_of_streak","text":"","code":"odds_of_streak(num_coins, min_heads, prob_heads, .saved = NULL)"},{"path":"https://mghoff.github.io/billmillr/reference/odds_of_streak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Odds of a Streak — odds_of_streak","text":"num_coins integer, total number coin flips min_heads integer, minimum number heads obtained single streak prob_heads number, probability obtaining heads single coin toss .saved data frame, contains previously computed probabilities given index; used speed recursion recalculate every probability already seen scenario num_coins, min_heads, prob_heads arises.","code":""},{"path":"https://mghoff.github.io/billmillr/reference/odds_of_streak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Odds of a Streak — odds_of_streak","text":"numeric, odds streak","code":""},{"path":"https://mghoff.github.io/billmillr/reference/odds_of_streak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Odds of a Streak — odds_of_streak","text":"","code":"odds_of_streak(num_coins = 5, min_heads = 3, prob_heads = 0.5) #> [1] 0.25"},{"path":"https://mghoff.github.io/billmillr/reference/prob_of_at_least_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Odds of at least K streaks — prob_of_at_least_k","title":"Odds of at least K streaks — prob_of_at_least_k","text":"Calculate probability occurrence least K-streaks N-events given odds stated streak.","code":""},{"path":"https://mghoff.github.io/billmillr/reference/prob_of_at_least_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Odds of at least K streaks — prob_of_at_least_k","text":"","code":"prob_of_at_least_k(N, K, p)"},{"path":"https://mghoff.github.io/billmillr/reference/prob_of_at_least_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Odds of at least K streaks — prob_of_at_least_k","text":"N integer, total number coin tossers. K integer, number streaks. p number, value 0 & 1 representing probability single streak.","code":""},{"path":"https://mghoff.github.io/billmillr/reference/prob_of_at_least_k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Odds of at least K streaks — prob_of_at_least_k","text":"number 0 1","code":""},{"path":"https://mghoff.github.io/billmillr/reference/prob_of_at_least_k.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Odds of at least K streaks — prob_of_at_least_k","text":"","code":"prob_of_at_least_k(  N = 8,  K = 1,  p = odds_of_streak(num_coins = 5, min_heads = 3, prob_heads = 0.5) ) #> [1] 0.8998871"},{"path":"https://mghoff.github.io/billmillr/reference/run_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Simulation — run_simulation","title":"Run Simulation — run_simulation","text":"Iterate count_runs(), counting number applicable trials trial defined occurrence streak least designated length. Additionally, keep running tally cumulative likelihood obtaining exactly zero streaks.","code":""},{"path":"https://mghoff.github.io/billmillr/reference/run_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Simulation — run_simulation","text":"","code":"run_simulation(   iters,   trials,   sample_space,   sample_probs = NULL,   sample_size,   run_value,   run_length )"},{"path":"https://mghoff.github.io/billmillr/reference/run_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Simulation — run_simulation","text":"iters number, number simulation iterations. trials number, see count_runs(). sample_space vector, see count_runs(). sample_probs vector, see count_runs(). sample_size number, see count_runs(). run_value number, see count_runs(). run_length number, see count_runs().","code":""},{"path":"https://mghoff.github.io/billmillr/reference/run_simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Simulation — run_simulation","text":"data frame 4 columns: iterations, applicable_trials, prob_of_zero, & prob_of_ge_one; number rows determined iters","code":""},{"path":"https://mghoff.github.io/billmillr/reference/run_simulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Simulation — run_simulation","text":"function outputs data frame four columns: 1.) iteration number, 2.) count applicable trials iteration, 3.) cumulative probability obtaining zero streaks. 4.) cumulative probability obtaining least one streak.","code":""},{"path":"https://mghoff.github.io/billmillr/reference/run_simulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Simulation — run_simulation","text":"","code":"tail(  run_simulation(    iters = 100,    trials = 8,    sample_space = c(0, 1),    sample_size = 5,    run_value = 1,    run_length = 3  ) ) #>     iterations applicable_trials prob_of_zero prob_of_ge_one #> 95          95                 1   0.09473684      0.9052632 #> 96          96                 3   0.09375000      0.9062500 #> 97          97                 5   0.09278351      0.9072165 #> 98          98                 4   0.09183673      0.9081633 #> 99          99                 2   0.09090909      0.9090909 #> 100        100                 3   0.09000000      0.9100000"},{"path":"https://mghoff.github.io/billmillr/news/index.html","id":"billmillr-010","dir":"Changelog","previous_headings":"","what":"billmillr 0.1.0","title":"billmillr 0.1.0","text":"Added NEWS.md file track changes package. Created package scaffolding: functions & documentation.","code":""},{"path":"https://mghoff.github.io/billmillr/news/index.html","id":"billmillr-020","dir":"Changelog","previous_headings":"","what":"billmillr 0.2.0","title":"billmillr 0.2.0","text":"Added functions & documentation simulation solution.","code":""},{"path":"https://mghoff.github.io/billmillr/news/index.html","id":"billmillr-021","dir":"Changelog","previous_headings":"","what":"billmillr 0.2.1","title":"billmillr 0.2.1","text":"Converted analytics functions use lower snake case. Updated documentation based rstudio::conf(2022) pkg development workshop.","code":""}]
